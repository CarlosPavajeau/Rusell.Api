// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rusell.Addresses.Shared.Infrastructure.Persistence.EntityFramework;

#nullable disable

namespace Rusell.Addresses.Migrations
{
    [DbContext(typeof(AddressesDbContext))]
    [Migration("20211214150755_AddCountry")]
    partial class AddCountry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rusell.Addresses.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Rusell.Addresses.Domain.Address", b =>
                {
                    b.OwnsOne("Rusell.Addresses.Domain.City", "City", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("city");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Rusell.Addresses.Domain.Comments", "Comments", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("comments");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Rusell.Addresses.Domain.Country", "Country", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("country");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Rusell.Addresses.Domain.Intersection", "Intersection", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("intersection");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Rusell.Addresses.Domain.Neighborhood", "Neighborhood", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("neighborhood");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Rusell.Addresses.Domain.State", "State", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("state");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Rusell.Addresses.Domain.StreetName", "StreetName", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("street_name");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Rusell.Addresses.Domain.StreetNumber", "StreetNumber", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("street_number");

                            b1.HasKey("AddressId");

                            b1.ToTable("addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.OwnsOne("Rusell.Shared.Domain.ValueObject.UserId", "UserId", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("user_id");

                            b1.HasKey("AddressId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("ix_addresses_user_id");

                            b1.ToTable("addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId")
                                .HasConstraintName("fk_addresses_addresses_id");
                        });

                    b.Navigation("City")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("Country")
                        .IsRequired();

                    b.Navigation("Intersection")
                        .IsRequired();

                    b.Navigation("Neighborhood");

                    b.Navigation("State")
                        .IsRequired();

                    b.Navigation("StreetName")
                        .IsRequired();

                    b.Navigation("StreetNumber")
                        .IsRequired();

                    b.Navigation("UserId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
