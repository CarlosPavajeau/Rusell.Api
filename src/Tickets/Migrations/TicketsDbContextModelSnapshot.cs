// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rusell.Tickets.Shared.Infrastructure.Persistence.EntityFramework;

#nullable disable

namespace Rusell.Tickets.Migrations
{
    [DbContext(typeof(TicketsDbContext))]
    partial class TicketsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rusell.Tickets.Clients.Domain.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("Rusell.Tickets.Domain.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_tickets_client_id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("Rusell.Tickets.Clients.Domain.Client", b =>
                {
                    b.OwnsOne("Rusell.Tickets.Clients.Domain.ClientName", "FullName", b1 =>
                        {
                            b1.Property<string>("ClientId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("full_name");

                            b1.HasKey("ClientId");

                            b1.ToTable("clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId")
                                .HasConstraintName("fk_clients_clients_id");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Tickets.Domain.Ticket", b =>
                {
                    b.HasOne("Rusell.Tickets.Clients.Domain.Client", "Client")
                        .WithMany("Tickets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_clients_client_temp_id");

                    b.OwnsOne("Rusell.Tickets.Domain.TicketDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId")
                                .HasConstraintName("fk_tickets_tickets_id");
                        });

                    b.OwnsOne("Rusell.Tickets.Domain.TicketSeatPrice", "SeatPrice", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("seat_price");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId")
                                .HasConstraintName("fk_tickets_tickets_id");
                        });

                    b.OwnsOne("Rusell.Tickets.Domain.TicketSeats", "Seats", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("seats");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId")
                                .HasConstraintName("fk_tickets_tickets_id");
                        });

                    b.OwnsOne("Rusell.Tickets.Domain.TicketTotal", "Total", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("total");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId")
                                .HasConstraintName("fk_tickets_tickets_id");
                        });

                    b.OwnsOne("Rusell.Tickets.Domain.TransportSheetId", "TransportSheetId", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("transport_sheet_id");

                            b1.HasKey("TicketId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("ix_tickets_transport_sheet_id");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId")
                                .HasConstraintName("fk_tickets_tickets_id");
                        });

                    b.Navigation("Client");

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("SeatPrice")
                        .IsRequired();

                    b.Navigation("Seats")
                        .IsRequired();

                    b.Navigation("Total")
                        .IsRequired();

                    b.Navigation("TransportSheetId")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Tickets.Clients.Domain.Client", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
