// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rusell.Vehicles.Shared.Infrastructure.Persistence.EntityFramework;

#nullable disable

namespace Rusell.Vehicles.Migrations
{
    [DbContext(typeof(VehiclesDbContext))]
    partial class VehiclesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rusell.Vehicles.Domain.LegalInformation.VehicleLegalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("VehicleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicle_license_plate");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_legal_information");

                    b.HasIndex("VehicleLicensePlate")
                        .HasDatabaseName("ix_vehicle_legal_information_vehicle_license_plate");

                    b.ToTable("vehicle_legal_information", (string)null);
                });

            modelBuilder.Entity("Rusell.Vehicles.Domain.Vehicle", b =>
                {
                    b.Property<string>("LicensePlate")
                        .HasColumnType("text")
                        .HasColumnName("license_plate");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("driver_id");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.HasKey("LicensePlate")
                        .HasName("pk_vehicles");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_vehicles_company_id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_vehicles_driver_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_vehicles_owner_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Rusell.Vehicles.Employees.Domain.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Rusell.Vehicles.Domain.LegalInformation.VehicleLegalInformation", b =>
                {
                    b.HasOne("Rusell.Vehicles.Domain.Vehicle", "Vehicle")
                        .WithMany("LegalInformation")
                        .HasForeignKey("VehicleLicensePlate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_legal_information_vehicles_vehicle_temp_id");

                    b.OwnsOne("Rusell.Vehicles.Domain.LegalInformation.DueDate", "DueDate", b1 =>
                        {
                            b1.Property<Guid>("VehicleLegalInformationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("due_date");

                            b1.HasKey("VehicleLegalInformationId");

                            b1.ToTable("vehicle_legal_information");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLegalInformationId")
                                .HasConstraintName("fk_vehicle_legal_information_vehicle_legal_information_id");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.LegalInformation.LegalInformationType", "Type", b1 =>
                        {
                            b1.Property<Guid>("VehicleLegalInformationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("type");

                            b1.HasKey("VehicleLegalInformationId");

                            b1.ToTable("vehicle_legal_information");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLegalInformationId")
                                .HasConstraintName("fk_vehicle_legal_information_vehicle_legal_information_id");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.LegalInformation.RenovationDate", "RenovationDate", b1 =>
                        {
                            b1.Property<Guid>("VehicleLegalInformationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("renovation_date");

                            b1.HasKey("VehicleLegalInformationId");

                            b1.ToTable("vehicle_legal_information");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLegalInformationId")
                                .HasConstraintName("fk_vehicle_legal_information_vehicle_legal_information_id");
                        });

                    b.Navigation("DueDate")
                        .IsRequired();

                    b.Navigation("RenovationDate")
                        .IsRequired();

                    b.Navigation("Type")
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Rusell.Vehicles.Domain.Vehicle", b =>
                {
                    b.HasOne("Rusell.Vehicles.Employees.Domain.Employee", "Driver")
                        .WithMany("VehiclesThatDrives")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_employees_driver_id1");

                    b.HasOne("Rusell.Vehicles.Employees.Domain.Employee", "Owner")
                        .WithMany("VehiclesThatOwn")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_employees_owner_id1");

                    b.OwnsOne("Rusell.Vehicles.Domain.ChassisNumber", "ChassisNumber", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("chassis_number");

                            b1.HasKey("VehicleLicensePlate");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ix_vehicles_chassis_number");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.EngineNumber", "EngineNumber", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("engine_number");

                            b1.HasKey("VehicleLicensePlate");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ix_vehicles_engine_number");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.InternalNumber", "InternalNumber", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("internal_number");

                            b1.HasKey("VehicleLicensePlate");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ix_vehicles_internal_number");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.PropertyCard", "PropertyCard", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("property_card");

                            b1.HasKey("VehicleLicensePlate");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ix_vehicles_property_card");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.VehicleChairs", "Chairs", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("chairs");

                            b1.HasKey("VehicleLicensePlate");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.VehicleColor", "Color", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("color");

                            b1.HasKey("VehicleLicensePlate");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.VehicleMark", "Mark", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("mark");

                            b1.HasKey("VehicleLicensePlate");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.VehicleModel", "Model", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("model");

                            b1.HasKey("VehicleLicensePlate");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.VehicleModelNumber", "ModelNumber", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("model_number");

                            b1.HasKey("VehicleLicensePlate");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.OwnsOne("Rusell.Vehicles.Domain.VehicleType", "Type", b1 =>
                        {
                            b1.Property<string>("VehicleLicensePlate")
                                .HasColumnType("text")
                                .HasColumnName("license_plate");

                            b1.Property<string>("Value")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("type");

                            b1.HasKey("VehicleLicensePlate");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleLicensePlate")
                                .HasConstraintName("fk_vehicles_vehicles_license_plate");
                        });

                    b.Navigation("Chairs")
                        .IsRequired();

                    b.Navigation("ChassisNumber")
                        .IsRequired();

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("EngineNumber")
                        .IsRequired();

                    b.Navigation("InternalNumber")
                        .IsRequired();

                    b.Navigation("Mark")
                        .IsRequired();

                    b.Navigation("Model")
                        .IsRequired();

                    b.Navigation("ModelNumber")
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("PropertyCard")
                        .IsRequired();

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Vehicles.Employees.Domain.Employee", b =>
                {
                    b.OwnsOne("Rusell.Vehicles.Employees.Domain.EmployeeName", "FullName", b1 =>
                        {
                            b1.Property<string>("EmployeeId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("full_name");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId")
                                .HasConstraintName("fk_employees_employees_id");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Vehicles.Domain.Vehicle", b =>
                {
                    b.Navigation("LegalInformation");
                });

            modelBuilder.Entity("Rusell.Vehicles.Employees.Domain.Employee", b =>
                {
                    b.Navigation("VehiclesThatDrives");

                    b.Navigation("VehiclesThatOwn");
                });
#pragma warning restore 612, 618
        }
    }
}
