// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rusell.Routes.Shared.Infrastructure.Persistence.EntityFramework;

#nullable disable

namespace Rusell.Routes.Migrations
{
    [DbContext(typeof(RoutesDbContext))]
    partial class RoutesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rusell.Routes.Companies.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Rusell.Routes.Domain.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("pk_routes");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_routes_company_id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("Rusell.Routes.Companies.Domain.Company", b =>
                {
                    b.OwnsOne("Rusell.Routes.Companies.Domain.CompanyName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("name");

                            b1.HasKey("CompanyId");

                            b1.ToTable("companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId")
                                .HasConstraintName("fk_companies_companies_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Routes.Domain.Route", b =>
                {
                    b.HasOne("Rusell.Routes.Companies.Domain.Company", "Company")
                        .WithMany("Routes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routes_companies_company_temp_id");

                    b.OwnsOne("Rusell.Routes.Domain.Cost", "Cost", b1 =>
                        {
                            b1.Property<Guid>("RouteId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Value")
                                .HasPrecision(3)
                                .HasColumnType("numeric(3)")
                                .HasColumnName("cost");

                            b1.HasKey("RouteId");

                            b1.ToTable("routes");

                            b1.WithOwner()
                                .HasForeignKey("RouteId")
                                .HasConstraintName("fk_routes_routes_id");
                        });

                    b.OwnsOne("Rusell.Routes.Domain.From", "From", b1 =>
                        {
                            b1.Property<Guid>("RouteId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("from");

                            b1.HasKey("RouteId");

                            b1.ToTable("routes");

                            b1.WithOwner()
                                .HasForeignKey("RouteId")
                                .HasConstraintName("fk_routes_routes_id");
                        });

                    b.OwnsOne("Rusell.Routes.Domain.IsCustomerDroppedOffAtHome", "IsCustomerDroppedOffAtHome", b1 =>
                        {
                            b1.Property<Guid>("RouteId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("is_customer_dropped_off_at_home");

                            b1.HasKey("RouteId");

                            b1.ToTable("routes");

                            b1.WithOwner()
                                .HasForeignKey("RouteId")
                                .HasConstraintName("fk_routes_routes_id");
                        });

                    b.OwnsOne("Rusell.Routes.Domain.IsCustomerPickedUpAtHome", "IsCustomerPickedUpAtHome", b1 =>
                        {
                            b1.Property<Guid>("RouteId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("is_customer_picked_up_at_home");

                            b1.HasKey("RouteId");

                            b1.ToTable("routes");

                            b1.WithOwner()
                                .HasForeignKey("RouteId")
                                .HasConstraintName("fk_routes_routes_id");
                        });

                    b.OwnsOne("Rusell.Routes.Domain.To", "To", b1 =>
                        {
                            b1.Property<Guid>("RouteId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("to");

                            b1.HasKey("RouteId");

                            b1.ToTable("routes");

                            b1.WithOwner()
                                .HasForeignKey("RouteId")
                                .HasConstraintName("fk_routes_routes_id");
                        });

                    b.Navigation("Company");

                    b.Navigation("Cost")
                        .IsRequired();

                    b.Navigation("From")
                        .IsRequired();

                    b.Navigation("IsCustomerDroppedOffAtHome")
                        .IsRequired();

                    b.Navigation("IsCustomerPickedUpAtHome")
                        .IsRequired();

                    b.Navigation("To")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Routes.Companies.Domain.Company", b =>
                {
                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
