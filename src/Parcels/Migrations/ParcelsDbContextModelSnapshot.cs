// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rusell.Parcels.Shared.Infrastructure.Persistence.EntityFramework;

#nullable disable

namespace Rusell.Parcels.Migrations
{
    [DbContext(typeof(ParcelsDbContext))]
    partial class ParcelsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rusell.Parcels.Clients.Domain.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("Rusell.Parcels.Companies.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Rusell.Parcels.Domain.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("DispatcherId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dispatcher_id");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_id");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_parcels");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_parcels_company_id");

                    b.HasIndex("DispatcherId")
                        .HasDatabaseName("ix_parcels_dispatcher_id");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_parcels_receiver_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_parcels_sender_id");

                    b.ToTable("parcels", (string)null);
                });

            modelBuilder.Entity("Rusell.Parcels.Employees.Domain.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Rusell.Parcels.Clients.Domain.Client", b =>
                {
                    b.OwnsOne("Rusell.Parcels.Clients.Domain.ClientName", "FullName", b1 =>
                        {
                            b1.Property<string>("ClientId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("full_name");

                            b1.HasKey("ClientId");

                            b1.ToTable("clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId")
                                .HasConstraintName("fk_clients_clients_id");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Parcels.Companies.Domain.Company", b =>
                {
                    b.OwnsOne("Rusell.Parcels.Companies.Domain.CompanyName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("name");

                            b1.HasKey("CompanyId");

                            b1.ToTable("companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId")
                                .HasConstraintName("fk_companies_companies_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Parcels.Domain.Parcel", b =>
                {
                    b.HasOne("Rusell.Parcels.Companies.Domain.Company", "Company")
                        .WithMany("Parcels")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parcels_companies_company_temp_id");

                    b.HasOne("Rusell.Parcels.Employees.Domain.Employee", "Dispatcher")
                        .WithMany("Parcels")
                        .HasForeignKey("DispatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parcels_employees_dispatcher_temp_id");

                    b.HasOne("Rusell.Parcels.Clients.Domain.Client", "Receiver")
                        .WithMany("ParcelsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parcels_clients_receiver_id1");

                    b.HasOne("Rusell.Parcels.Clients.Domain.Client", "Sender")
                        .WithMany("ParcelsSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parcels_clients_sender_id1");

                    b.OwnsOne("Rusell.Parcels.Domain.ParcelCost", "Cost", b1 =>
                        {
                            b1.Property<Guid>("ParcelId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("cost");

                            b1.HasKey("ParcelId");

                            b1.ToTable("parcels");

                            b1.WithOwner()
                                .HasForeignKey("ParcelId")
                                .HasConstraintName("fk_parcels_parcels_id");
                        });

                    b.OwnsOne("Rusell.Parcels.Domain.ParcelDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("ParcelId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date");

                            b1.HasKey("ParcelId");

                            b1.ToTable("parcels");

                            b1.WithOwner()
                                .HasForeignKey("ParcelId")
                                .HasConstraintName("fk_parcels_parcels_id");
                        });

                    b.OwnsOne("Rusell.Parcels.Domain.ParcelDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("ParcelId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.HasKey("ParcelId");

                            b1.ToTable("parcels");

                            b1.WithOwner()
                                .HasForeignKey("ParcelId")
                                .HasConstraintName("fk_parcels_parcels_id");
                        });

                    b.OwnsOne("Rusell.Parcels.Domain.VehicleLicensePlate", "VehicleLicensePlate", b1 =>
                        {
                            b1.Property<Guid>("ParcelId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("vehicle_license_plate");

                            b1.HasKey("ParcelId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("ix_parcels_vehicle_license_plate");

                            b1.ToTable("parcels");

                            b1.WithOwner()
                                .HasForeignKey("ParcelId")
                                .HasConstraintName("fk_parcels_parcels_id");
                        });

                    b.Navigation("Company");

                    b.Navigation("Cost")
                        .IsRequired();

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Dispatcher");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("VehicleLicensePlate")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Parcels.Employees.Domain.Employee", b =>
                {
                    b.OwnsOne("Rusell.Parcels.Employees.Domain.EmployeeName", "FullName", b1 =>
                        {
                            b1.Property<string>("EmployeeId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("full_name");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId")
                                .HasConstraintName("fk_employees_employees_id");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("Rusell.Parcels.Clients.Domain.Client", b =>
                {
                    b.Navigation("ParcelsReceived");

                    b.Navigation("ParcelsSent");
                });

            modelBuilder.Entity("Rusell.Parcels.Companies.Domain.Company", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("Rusell.Parcels.Employees.Domain.Employee", b =>
                {
                    b.Navigation("Parcels");
                });
#pragma warning restore 612, 618
        }
    }
}
